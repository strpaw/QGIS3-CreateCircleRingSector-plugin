# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreateCircleRingSector
                                 A QGIS plugin
 Creates sector of circle ring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-12-15
        git sha              : $Format:%H$
        copyright            : (C) 2018 by PaweÅ‚ Strzelewicz
        email                : @
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox, QWidget
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .circ_ring_sector_dialog import CreateCircleRingSectorDialog
import os.path
import math
from . import circ_tools as ct

w = QWidget()

class CreateCircleRingSector:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.circ_center = None
        self.point_from = None
        self.brng_from = None
        self.point_to = None
        self.brng_to = None
        self.radius_inner_m = None
        self.radius_outer_m = None
        self.mlyr_name = ''
        self.polygon_name = ''

        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CreateCircleRingSector_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = CreateCircleRingSectorDialog()
        self.dlg.pushButtonAddCircleRingSector.clicked.connect(self.add_circle_ring_sector)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CreateCircleRingSector')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'CreateCircleRingSector')
        self.toolbar.setObjectName(u'CreateCircleRingSector')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CreateCircleRingSector', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/circ_ring_sector/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CreateCircleRingSector'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CreateCircleRingSector'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    @staticmethod
    def create_mem_lyr(lyr_name):
        """ Create temporary 'memory' layer to store results.
        :param lyr_name: string, layer name
        """
        mlyr = QgsVectorLayer('Polygon?crs=epsg:4326', lyr_name, 'memory')
        prov = mlyr.dataProvider()
        mlyr.startEditing()
        prov.addAttributes([QgsField("PNAME", QVariant.String)])
        mlyr.commitChanges()
        QgsProject.instance().addMapLayer(mlyr)

    def add_feature_to_layer(self, boundary):
        """ Add feature to layer
        :param: boundary: list, list of QgsPoint objects
        """
        out_lyr = QgsVectorLayer('Polygon?crs=epsg:4326', self.mlyr_name, 'memory')
        out_lyr = self.iface.activeLayer()
        out_lyr.startEditing()
        out_prov = out_lyr.dataProvider()
        feat = QgsFeature()
        feat.setGeometry(QgsGeometry.fromPolygonXY([boundary]))
        feat.setAttributes([self.polygon_name])
        out_prov.addFeatures([feat])
        out_lyr.commitChanges()
        out_lyr.updateExtents()
        self.iface.mapCanvas().setExtent(out_lyr.extent())
        self.iface.mapCanvas().refresh()

    def get_radius_inner_uom(self):
        """ Returns radius unit of measure """
        if self.dlg.comboBoxRadiusInnerUOM.currentIndex() == 0:  # m
            return ct.UOM_M
        elif self.dlg.comboBoxRadiusInnerUOM.currentIndex() == 1:  # km
            return ct.UOM_KM
        elif self.dlg.comboBoxRadiusInnerUOM.currentIndex() == 2:  # NM
            return ct.UOM_NM
        elif self.dlg.comboBoxRadiusInnerUOM.currentIndex() == 3:  # feet
            return ct.UOM_FEET
        elif self.dlg.comboBoxRadiusInnerUOM.currentIndex() == 4:  # SM
            return ct.UOM_SM

    def get_radius_outer_uom(self):
        """ Returns radius unit of measure """
        if self.dlg.comboBoxRadiusOuterUOM.currentIndex() == 0:  # m
            return ct.UOM_M
        elif self.dlg.comboBoxRadiusOuterUOM.currentIndex() == 1:  # km
            return ct.UOM_KM
        elif self.dlg.comboBoxRadiusOuterUOM.currentIndex() == 2:  # NM
            return ct.UOM_NM
        elif self.dlg.comboBoxRadiusOuterUOM.currentIndex() == 3:  # feet
            return ct.UOM_FEET
        elif self.dlg.comboBoxRadiusOuterUOM.currentIndex() == 4:  # SM
            return ct.UOM_SM

    def get_input(self):
        """ Get input data.
        If input is correct also calculates: true bearing from, true bearing to, and point from and to of arc.
        :return: get_result: bool, True if input is correct, False otherwise
        """
        get_result = True
        err_msg = ''

        self.circ_center = ct.CoordinatesPair(self.dlg.lineEditCenterLat.text(),
                                              self.dlg.lineEditCenterLon.text())

        mag_var = ct.MagVar(self.dlg.lineEditCenterMagVar.text())

        self.brng_from = ct.Bearing(self.dlg.lineEditBrngFrom.text())
        self.brng_to = ct.Bearing(self.dlg.lineEditBrngTo.text())

        if self.circ_center.is_valid is False:
            get_result = False
            err_msg += self.circ_center.err_msg

        if mag_var.is_valid is False:
            get_result = False
            err_msg += mag_var.err_msg

        if self.brng_from.is_valid is False:
            get_result = False
            if self.brng_from.src_value == '':
                err_msg += 'Enter bearing from!\n'
            else:
                err_msg += 'Bearing from error!\n'

        if self.brng_to.is_valid is False:
            get_result = False
            if self.brng_to.src_value == '':
                err_msg += 'Enter bearing to!\n'
            else:
                err_msg += 'Bearing to error!\n'

        radius_in_src = self.dlg.lineEditRadiusInner.text()
        radius_in_check = None
        if radius_in_src == '':
            get_result = False
            err_msg += 'Enter radius inner!\n'
        else:
            radius_in_check = ct.check_distance2(radius_in_src)
            if radius_in_check == ct.NOT_VALID:
                get_result = False
                err_msg += 'Radius inner error!'

        radius_out_src = self.dlg.lineEditRadiusOuter.text()
        radius_out_check = None
        if radius_out_src == '':
            get_result = False
            err_msg += 'Enter radius outer!\n'
        else:
            radius_out_check = ct.check_distance2(radius_out_src)
            if radius_out_check == ct.NOT_VALID:
                get_result = False
                err_msg += 'Radius outer error!'

        if get_result is False:
            QMessageBox.critical(w, "Message", err_msg)
        else:
            # Calculate radius inner in m
            self.radius_inner_m = ct.convert_distance(radius_in_check, self.get_radius_inner_uom(), ct.UOM_M)
            # Calculate radius outer in m
            self.radius_outer_m = ct.convert_distance(radius_out_check, self.get_radius_outer_uom(), ct.UOM_M)
            # Calculate true brng from and true brng to
            self.brng_from.calc_tbrng(mag_var.dd_value)
            self.brng_to.calc_tbrng(mag_var.dd_value)
        return get_result

    def add_circle_ring_sector(self):
        if self.get_input():
            # Crate circle ring sector polygon
            # Calculates vertices A, B, C, D
            a_lat, a_lon = ct.vincenty_direct_solution(self.circ_center.dd_lat,
                                                       self.circ_center.dd_lon,
                                                       self.brng_from.dd_tbrng,
                                                       self.radius_inner_m,
                                                       ct.WGS84_A,
                                                       ct.WGS84_B,
                                                       ct.WGS84_F)
            b_lat, b_lon = ct.vincenty_direct_solution(self.circ_center.dd_lat,
                                                       self.circ_center.dd_lon,
                                                       self.brng_from.dd_tbrng,
                                                       self.radius_outer_m,
                                                       ct.WGS84_A,
                                                       ct.WGS84_B,
                                                       ct.WGS84_F)
            c_lat, c_lon = ct.vincenty_direct_solution(self.circ_center.dd_lat,
                                                       self.circ_center.dd_lon,
                                                       self.brng_to.dd_tbrng,
                                                       self.radius_outer_m,
                                                       ct.WGS84_A,
                                                       ct.WGS84_B,
                                                       ct.WGS84_F)
            d_lat, d_lon = ct.vincenty_direct_solution(self.circ_center.dd_lat,
                                                       self.circ_center.dd_lon,
                                                       self.brng_to.dd_tbrng,
                                                       self.radius_inner_m,
                                                       ct.WGS84_A,
                                                       ct.WGS84_B,
                                                       ct.WGS84_F)

            a_vertex = QgsPointXY(a_lon, a_lat)
            b_vertex = QgsPointXY(b_lon, b_lat)
            c_vertex = QgsPointXY(c_lon, c_lat)
            d_vertex = QgsPointXY(d_lon, d_lat)

            poly_vertices = []
            poly_vertices.append(a_vertex)
            poly_vertices.append(b_vertex)

            # Outer arc - clockwise

            # Calculate arc angle
            arc_angle = math.floor(self.brng_to.dd_tbrng) - math.ceil(self.brng_from.dd_tbrng)
            if arc_angle < 0:
                arc_angle += 360
            elif arc_angle > 360:
                arc_angle -= 360

            for i in range(0, arc_angle + 1):
                vertex_lat, vertex_lon = ct.vincenty_direct_solution(self.circ_center.dd_lat,
                                                                     self.circ_center.dd_lon,
                                                                     math.ceil(self.brng_from.dd_tbrng) + i,
                                                                     self.radius_outer_m,
                                                                     ct.WGS84_A,
                                                                     ct.WGS84_B,
                                                                     ct.WGS84_F)

                arc_vertex = QgsPointXY(vertex_lon, vertex_lat)
                poly_vertices.append(arc_vertex)

            poly_vertices.append(c_vertex)
            poly_vertices.append(d_vertex)

            # Calculate vertices that form inner arc - counter-clockwise
            for i in range(0, arc_angle + 1):
                vertex_lat, vertex_lon = ct.vincenty_direct_solution(self.circ_center.dd_lat,
                                                                     self.circ_center.dd_lon,
                                                                     math.floor(self.brng_to.dd_tbrng) - i,
                                                                     self.radius_inner_m,
                                                                     ct.WGS84_A,
                                                                     ct.WGS84_B,
                                                                     ct.WGS84_F)

                arc_vertex = QgsPointXY(vertex_lon, vertex_lat)
                poly_vertices.append(arc_vertex)

            poly_vertices.append(a_vertex)

            layers = QgsProject.instance().layerTreeRoot().children()
            layers_list = []  # List of layers in current (opened) QGIS project
            for layer in layers:
                layers_list.append(layer.name())

            tmp_name = 'TMP_POLYGON'
            self.polygon_name = self.dlg.lineEditPolyName.text()

            if self.mlyr_name not in layers_list:
                self.mlyr_name = tmp_name
                self.create_mem_lyr(self.mlyr_name)
                self.add_feature_to_layer(poly_vertices)
            else:
                self.add_feature_to_layer(poly_vertices)

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
